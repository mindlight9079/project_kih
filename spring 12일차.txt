spring 12일차


ajax란 Asynchronous JavaScript and XML의 약자입니다.
ajax는 빠르게 동작하는 동적인 웹 페이지를 만들기 위한 개발 기법의 하나입니다.
ajax는 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있습니다.
즉 Ajax를 이용하면 백그라운드 영역에서 서버와 통신하여,
그 결과를 웹 페이지의 일부분에만 표시할 수 있습니다.

JSON(JavaScript Object Notation)은 속성-값 쌍 또는 "키-값 쌍"으로 이루어진 데이터
오브젝트를 전달하기 위해 인간이 읽을 수 있는 텍스트를 사용하는 개방형 표준 포맷이다.

교재 p.354
@RestController = @Controller + @ResponseBody
@ResponseBody : 서버에서 전송하는 데이터가 화면이 아닌 데이터 자체가 된다.

p.357
회원가입 아이디 중복 검사 :
의존성 3가지 추가

pom.xml


<dependency>
	 <groupId>com.fasterxml.jackson.core</groupId>
	 <artifactId>jackson-databind</artifactId>
	 <version>2.9.6</version>
</dependency>


<dependency>
	<groupId>com.fasterxml.jackson.dataformat</groupId>
	<artifactId>jackson-dataformat-xml</artifactId>
	<version>2.9.6</version>
</dependency>


<dependency>
	<groupId>com.google.code.gson</groupId>
	<artifactId>gson</artifactId>
	<version>2.8.2</version>
</dependency>


signup.jsp에 스크립트 추가

		$('#dupCheck').click(function(){
			var id = $('[name=id]').val();
			$.ajax({
				type : 'get',
				url : '<%=request.getContextPath()%>/member/idcheck/' + id,
				success : function(result, status, xhr){
					console.log(result);	
				}, 
				error : function(xhr, status, e){
					
				}
			})
		})


HomeController.java

	@ResponseBody
	@GetMapping(value="/member/idcheck/{id}")
	public String memberIdcheckPost(@PathVariable("id") String id){
		MemberVO user = memberService.getMember(id);
		String res = user != null ? "IMPOSSIBLE" : "POSSIBLE";
		return res;
	}


로그인 기능

singin.jsp

<script type="text/javascript">
	$(function(){
		$('#loginBtn').click(function(){
			var id = $('[name=id]').val();
			var pw = $('[name=pw]').val();
			var data = {'id' : id, 'pw': pw};
			$.ajax({
				type: 'post',
				url : '<%=request.getContextPath()%>/member/signin',
				data : JSON.stringify(data),
				contentType : "application/json; charset=utf-8",
				success : function(result, status, xhr){
					console.log(result);
				},
				error: function(xhr, status, e){
					
				}
			})
		})
	})
</script>



HomeController.java

@ResponseBody
@PostMapping(value="/member/signin")
public String memberSigninPost(@RequestBody MemberVO user, HttpServletRequest r){
	MemberVO dbUser = memberService.signin(user);
	if(dbUser != null)
		r.getSession().setAttribute("user", dbUser);
	return dbUser != null ? "success" : "fail";
}



좋아요 기능 - 
추천을 누르면 추천이 됨, 이미 추천되어 있으면 추천을 취소.
비추천을 누르면 비추천이 됨, 이미 비추되어 있으면 비추를 취소.

recommend(추천)
- num : 기본키
- board : 게시글 번호
- id : 사용자
- state : 추천/비추천/아무것도 아닌지


mysql에 recommend 테이블 생성
CREATE TABLE `recommend` (
  `num` int NOT NULL AUTO_INCREMENT,
  `id` varchar(15) NOT NULL,
  `board` int NOT NULL,
  `state` int NOT NULL,
  PRIMARY KEY (`num`),
  KEY `id2_idx` (`id`),
  KEY `board2_idx` (`board`),
  CONSTRAINT `board2` FOREIGN KEY (`board`) REFERENCES `board` (`num`),
  CONSTRAINT `id2` FOREIGN KEY (`id`) REFERENCES `member` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci



detail.jsp

추천/비추천 버튼을 만들고 스크립트 추가.
$(function(){
	$('.re-btn').click(function(){
		//추천 버튼이면 state를 1로, 비추 버튼이면 state를 -1로
		var state = $(this).hasClass('up')? 1 : -1;
		var num = '<c:out value="${board.num}"/>'
		$.ajax({
			type : 'get',
			url : '<%=request.getContextPath()%>/board/recommend/' + state,
			dataType : "json",
			success : function(result, status, xhr){
				console.log(result)
			}, 
			error : function(xhr, status, e){
				
			}
		})			
	})
})


BoardController.java에 메소드 추가